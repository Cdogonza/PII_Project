<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Admin">
            <summary>
            Esta clase representa al administrador del Bot
            </summary>
        </member>
        <member name="P:ClassLibrary.Admin.Name">
            <summary>
            Propiedad nombre del Administrador
            </summary>
        </member>
        <member name="M:ClassLibrary.Admin.#ctor(System.String)">
            <summary>
            Constructor de la clase Admin
            </summary>
        </member>
        <member name="M:ClassLibrary.Admin.InviteCompany(System.String)">
            <summary>
            Metodo que se utilizara para invitar a las Empresas al sistema.
            </summary>
            <param name="company"></param>
        </member>
        <member name="T:ClassLibrary.AreaOfWork">
            <summary>
            Representa una categoria de una empresa
            </summary>
        </member>
        <member name="P:ClassLibrary.AreaOfWork.Name">
            <summary>
            Propiedad nombre de la categoria de la empresa
            </summary>
        </member>
        <member name="M:ClassLibrary.AreaOfWork.#ctor(System.String)">
            <summary>
            Crea instancias de este tipo
            </summary>
        </member>
        <member name="T:ClassLibrary.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(ClassLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(System.String[],ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:ClassLibrary.BaseHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:ClassLibrary.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.Company">
            <summary>
            Clase que representa a un usuario del tipo compania dentro del programa
            </summary>
        </member>
        <member name="M:ClassLibrary.Company.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor de company
            </summary>
            <param name="name"></param>
            <param name="phone"></param>
            <param name="location"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Company.DataCompany">
            <summary>
            Devuelve una lista con la información de una compania
            </summary>
        </member>
        <member name="T:ClassLibrary.ConsolePrinter">
            <summary>
            Esta clase implementa el tipo Iprinter y tiene como responsabilidad imprirmir 
            por pantalla la informacion que recibe de las otras clases.
            </summary>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintOffersAvailability(ClassLibrary.OfferManager)">
            <summary>
            Este metodo se encarga de imprimir en pantalla lo que devuelve GetOffertsAvailability de OfferManager
            </summary>
            <param name="offermanager"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintMyOffersAvailability(ClassLibrary.Search,ClassLibrary.Company)">
            <summary>
             Este metodo se encarga de imprimir en pantalla lo que devuelve GetMyOffertsAvailability de OfferManager
            </summary>
            <param name="search"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintOffersByLocation(ClassLibrary.Search,System.String)">
            <summary>
             Este metodo se encarga de imprimir en pantalla lo que devuelve GetOfferByLocation de Search
            </summary>
            <param name="search"></param>
            <param name="location"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintOffersByWord(ClassLibrary.Search,System.String)">
            <summary>
            Este metodo se encarga de imprimir en pantalla lo que devuelve GetOfferByWord de Search
            </summary>
            <param name="search"></param>
            <param name="word"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintOffersByCategory(ClassLibrary.Search,System.String)">
            <summary>
            Este metodo se encarga de imprimir en pantalla lo que devuelve GetOfferByCategory de Search
            </summary>
            <param name="search"></param>
            <param name="category"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintOffersByEntrepreneur(ClassLibrary.Search,ClassLibrary.Entrepreneur)">
            <summary>
            Este metodo se encarga de imprimir en pantalla lo que devuelve GetOfferByEntrepreneur de Search
            </summary>
            <param name="search"></param>
            <param name="entrepreneur"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintOffersByCompany(ClassLibrary.Search,ClassLibrary.Company)">
            <summary>
            Este metodo se encarga de imprimir en pantalla lo que devuelve GetOfferByCompany de Search
            </summary>
            <param name="search"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintPermissions(ClassLibrary.DataManager)">
            <summary>
            Este metodo se encarga de imprimir en pantalla lo que devuelve GetTextToPrintPermission de Datamanager
            </summary>
            <param name="datamanager"></param>    
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintAreaOfWork(ClassLibrary.DataManager)">
            <summary>
            Este metodo se encarga de imprimir en pantalla lo que devuelve GetTextToPrintPermission de Datamanager
            </summary>
            <param name="datamanager"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintMaterialType(ClassLibrary.DataManager)">
            <summary>
            Este metodo se encarga de imprimir en pantalla lo que devuelve GetTextToPrintMaterialType de Datamanager
            </summary>
            <param name="datamanager"></param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.PrintUserPermissions(ClassLibrary.UserBase)">
            <summary>
            Metodo para imprimir por pantalla los permisos que posee el usuario
            </summary>
            <param name="userbase"></param>
        </member>
        <member name="T:ClassLibrary.DataManager">
            <summary>
            /// Esta clase es la encargada de manejar los datos de AreaOfWork(Rubros) MaterialsTypes y Permissions(Habilitaciones)
            Se implementa utilizando singleton con el fin de utilizar una unica instancia, 
            ya que no queremos que hayan multiples listas de Rubros, Permisos y Tipos de materiales
            </summary>
        </member>
        <member name="F:ClassLibrary.DataManager.areaofwork">
            <summary>
            Lista de String donde se almacenan los rubros
            </summary>
            <typeparam List="string"></typeparam>
            <returns></returns>        
        </member>
        <member name="F:ClassLibrary.DataManager.materialsType">
            <summary>
            Lista de MaterialType donde se almacenan los tipos de materiales 
            </summary>
            <typeparam List="MaterialType"></typeparam>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.DataManager.permissions">
            <summary>
            Lista de Permisos donde se almacenan los permisos a ser usados por las empresas y las ofertas
            </summary>
            <typeparam List="Permission"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.DataManager.AddPermission(ClassLibrary.Permission)">
            <summary>
            Metodo para agregar permisos al listado de permisos
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.DataManager.CheckPermission(System.Int32)">
            <summary>
            Metodo que chequea si el permiso ingresado por el usuario existe en la lista de Permisos del sistema. 
            </summary>
            <param name="indice"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.DataManager.GetPermissionByIndex(System.Int32)">
            <summary>
             Metodo que retorna el permiso segun el lugar de la lista ingresado
            </summary>
            <param name="indice"></param>
            <returns></returns> 
        </member>
        <member name="M:ClassLibrary.DataManager.GetTextToPrintPermission">
            <summary>
             Metodo utilizado para obtener todos los permisos de la lista y restornarlos como texto,
             Para que ConsolePrinter pueda obtener ese texto e imprimirlo en pantalla.
            </summary>
            <returns>data</returns> Texto que obtiene ConsolePrinter para imprimir
        </member>
        <member name="M:ClassLibrary.DataManager.GetPermissions">
            <summary>
             Retorna la lista de Permisos almacenados en el sistema
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.DataManager.AddAreaOfWork(System.String)">
            <summary>
            Metodo para agregar Rubros a la lista de Rubros
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.DataManager.CheckAreaOfWork(System.Int32)">
            <summary>
            Metodo que corrobora si el numero ingresado por el usuario para agregar el rubro en su listado, existe en el listado de rubros.
            </summary>
            <param name="indice"></param>
            <returns>Retorna True si existe, sino retorna False</returns>        
        </member>
        <member name="M:ClassLibrary.DataManager.GetAreaOfWorkByIndex(System.Int32)">
            <summary>
            Metodo que retorna el Rubro segun el lugar ingresado de la lista
            </summary>
            <param name="indice"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.DataManager.GetTextToPrintAreaOfWork">
            <summary>
             Metodo utilizado para obtener todos los rubros de la lista y retornarlos como texto,
             Para que ConsolePrinter pueda obtener ese texto e imprimirlo en pantalla. 
            </summary>
            <returns>data</returns> Texto que obtiene ConsolePrinter para imprimir
        </member>
        <member name="M:ClassLibrary.DataManager.GetAreasOfWork">
            <summary>
            Retorna la lista de Rubros almacenados en el sistema
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.DataManager.AddMaterialType(ClassLibrary.MaterialType)">
            <summary>
            Agrega un tipo de Material a la lista de MaterialTypes
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.DataManager.CheckMaterialType(System.Int32)">
            <summary>
            Verifica si el material ingresado por el usuario existe en la lista de Materiales.
            </summary>
            <param name="indice"></param>
            <returns>Retorna True si el Tipo de Material existe en la lista, sino existe devuelve False</returns>
        </member>
        <member name="M:ClassLibrary.DataManager.GetMaterialTypeByIndex(System.Int32)">
            <summary>
            Metodo que retorna el Tipo de Material segun el lugar ingresado de la lista
            </summary>
            <param name="indice"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.DataManager.GetTextToPrintMaterialType">
            <summary>
            Metodo utilizado para obtener todos los rubros de la lista y retornarlos como texto,
            Para que ConsolePrinter pueda obtener ese texto e 
            </summary>
        </member>
        <member name="M:ClassLibrary.DataManager.GetMaterialsType">
            <summary>
            Retorna la lista de Materiales almacenados en el sistema
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Distance">
            <summary>
            Representa la distancia entre las coordenas o las direcciones de origen y destino retornada en los métodos
            <see cref="M:ClassLibrary.LocationApiClient.GetDistanceAsync(ClassLibrary.Location,ClassLibrary.Location)"/> o
            <see cref="M:ClassLibrary.LocationApiClient.GetDistanceAsync(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:ClassLibrary.Distance.Found">
            <summary>
            Obtiene o establece un valor que indica si se encontraron o no las coordenas o las direcciones de origen y
            destino.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:ClassLibrary.Distance.TravelDistance">
            <summary>
            Obtiene o establece la distancia entre las coordenadas o las direcciones de origen y destino.
            </summary>
            <value>La distancia en metros.</value>
        </member>
        <member name="P:ClassLibrary.Distance.TravelDuration">
            <summary>
            Obtiene o establece el tiempo que se demora en llegar de las coordenadas o de las direcciones de origen a las de destino.
            </summary>
            <value>El tiempo que se demora en minutos.</value>
        </member>
        <member name="T:ClassLibrary.Entrepreneur">
            <summary>
             Esta clase representa al emprendedor el cual hereda metodos y atributos de la clase UserBase
            </summary>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Specialization">
            <summary>
            String de la especializacion
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Entrepreneur.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor de la clase Entrepreneur
            </summary>
            <param name="name"></param>
            <param name="phone"></param>
            <param name="location"></param>
            <param name="area"></param>
            <param name="specialization"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.HelloHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.HelloHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.HelloHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:ClassLibrary.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:ClassLibrary.IPrinter">
            <summary>
            Esta interfaz define las operaciones necesarias para imprimir los diferentes textos del programa
            </summary>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintOffersAvailability(ClassLibrary.OfferManager)">
            <summary>
            Este metodo imprime las ofertas en estado disponible 
            </summary>
            <param name="offermanager"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintMyOffersAvailability(ClassLibrary.Search,ClassLibrary.Company)">
            <summary>
            Este metodo imprime las ofertas disponibles de la compania
            </summary>
            <param name="search"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintOffersByLocation(ClassLibrary.Search,System.String)">
            <summary>
            Este metodo imprime las ofertas filtradas por Ubicacion
            </summary>
            <param name="search"></param>
            <param name="location"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintOffersByWord(ClassLibrary.Search,System.String)">
            <summary>
            Este metodo imprime las ofertas filtradas por Palabra
            </summary>
            <param name="search"></param>
            <param name="word"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintOffersByCategory(ClassLibrary.Search,System.String)">
            <summary>
            Este metodo imprime las ofertas de una Catergoria
            </summary>
            <param name="search"></param>
            <param name="category"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintOffersByEntrepreneur(ClassLibrary.Search,ClassLibrary.Entrepreneur)">
            <summary>
            Este metodo imprime las ofertas de un emprendedor
            </summary>
            <param name="search"></param>
            <param name="entrepreneur"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintOffersByCompany(ClassLibrary.Search,ClassLibrary.Company)">
            <summary>
            Este metodo imprime todas las ofertas de una companía
            </summary>
            <param name="search"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintPermissions(ClassLibrary.DataManager)">
            <summary>
            Metodo que imprime todos los permisos cargados en el sistema
            </summary>
            <param name="datamanager"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintAreaOfWork(ClassLibrary.DataManager)">
            <summary>
            Metodo que imprime todos los Rubros cargados en el sistema
            </summary>
            <param name="datamanager"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintMaterialType(ClassLibrary.DataManager)">
            <summary>
            Metodo que Imprime todos los materiales existentes en el sistema
            </summary>
            <param name="datamanager"></param>
        </member>
        <member name="M:ClassLibrary.IPrinter.PrintUserPermissions(ClassLibrary.UserBase)">
            <summary>
            Metodo que imprime todos los permisos del usuario
            </summary>
            <param name="userbase"></param>    
        </member>
        <member name="T:ClassLibrary.Location">
            <summary>
            Representa las coordenadas y otros datos de la ubicación de una dirección retornada en el método
            <see cref="M:ClassLibrary.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:ClassLibrary.Location.Found">
            <summary>
            Obtiene o establece un valor que indica si se encontró o no la dirección. En ese caso son válidos los demás
            valores. En caso contrario los demás valores son indeterminados.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:ClassLibrary.Location.AddresLine">
            <summary>
            Obtiene o establece la dirección: calle y número, ruta y kilómetro, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738.</value>
        </member>
        <member name="P:ClassLibrary.Location.CountryRegion">
            <summary>
            Obtiene o establece el país.
            </summary>
            <value>Por ejemplo, Uruguay.</value>
        </member>
        <member name="P:ClassLibrary.Location.FormattedAddress">
            <summary>
            Obtiene o establece la dirección completa, incluyendo ciudad, código postal, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738, Montevideo, 11200, Uruguay.</value>
        </member>
        <member name="P:ClassLibrary.Location.Locality">
            <summary>
            Obtiene o establece la localidad o ciudad.
            </summary>
            <value>Por ejemplo, Montevideo.</value>
        </member>
        <member name="P:ClassLibrary.Location.PostalCode">
            <summary>
            Obtiene o establece el código postal.
            </summary>
            <value>Por ejemplo, 11200.</value>
        </member>
        <member name="P:ClassLibrary.Location.Latitude">
            <summary>
            Obtiene o establece la latitud de la dirección.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:ClassLibrary.Location.Longitude">
            <summary>
            Obtiene o establece la longitud de la dirección.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="T:ClassLibrary.LocationApiClient">
            <summary>
            Un cliente de la API de localización.
            </summary>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Obtiene las coordenadas de una dirección.
            </summary>
            <param name="address">La dirección.</param>
            <param name="city">La ciudad. Es opcional. El valor predeterminado es Montevideo.</param>
            <param name="department">El departamento, estado, provincia, etc. Es opcional. El valor predeterminado es `ontevideo.</param>
            <param name="country">El país. Es opcional. El valor predeterminado es Uruguay.</param>
            <returns>Las coordenadas de la dirección.</returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetLocation(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetDistanceAsync(ClassLibrary.Location,ClassLibrary.Location)">
            <summary>
            Obtiene la distancia entre dos coordenadas.
            </summary>
            <param name="from">La coordenada de origen.</param>
            <param name="to">La coordenada de destino.</param>
            <returns>La distancia entre las dos coordenadas.</returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetDistance(ClassLibrary.Location,ClassLibrary.Location)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.GetDistanceAsync(ClassLibrary.Location,ClassLibrary.Location)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetDistanceAsync(System.String,System.String)">
            <summary>
            Obtiene la distancia entre dos direcciones.
            </summary>
            <param name="from">La dirección de origen.</param>
            <param name="to">La dirección de destino.</param>
            <returns>La distancia entre las dos direcciones.</returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetDistance(System.String,System.String)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.GetDistanceAsync(System.String,System.String)" />.
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.DownloadMapAsync(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Descarga una mapa de una coordenada.
            </summary>
            <param name="latitude">La latitud de la coordenada.</param>
            <param name="longitude">La longitud de la coordenada.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. El formato es PNG.</param>
            <param name="zoomLevel">El nivel de zoom del mapa entre 1 y 20. Es opcional. El valor predeterminado es
            15.</param>
            <returns>
            Una tarea que representa la operación asincrónica.
            </returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.DownloadMap(System.Double,System.Double,System.String,System.Int32)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.DownloadMapAsync(System.Double,System.Double,System.String,System.Int32)" />.
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.DownloadRouteAsync(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Un mapa con una ruta entre dos coordenadas.
            </summary>
            <param name="fromLatitude">La latitud de la coordenada de origen.</param>
            <param name="fromLongitude">La longitu de la coordenada de origen.</param>
            <param name="toLatitude">La latitud de la coordenada de destino.</param>
            <param name="toLongitude">La longitud de la coordenada de destino.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. Es formato es PNG.</param>
            <returns>
            Una tarea que representa la operación asincrónica.
            </returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.DownloadRoute(System.Double,System.Double,System.Double,System.Double,System.String)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.DownloadRouteAsync(System.Double,System.Double,System.Double,System.Double,System.String)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.Dispose">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="M:ClassLibrary.LocationApiClient.Dispose(System.Boolean)">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="T:ClassLibrary.Material">
            <summary>
            Esta clase es la encargada de crear instancias de materiales
            </summary>
        </member>
        <member name="P:ClassLibrary.Material.Name">
            <summary>
            String del nombre del material
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Type">
            <summary>
            Instancia de MaterialType que representa el tipo del material
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Quantity">
            <summary>
            String de la cantidad del material 
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Cost">
            <summary>
            El costo del material
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Location">
            <summary>
            String de la ubicación del material
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Material.#ctor(System.String,ClassLibrary.MaterialType,System.String,System.Double,System.String)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="quantity"></param>
            <param name="cost"></param>
            <param name="location"></param>
        </member>
        <member name="T:ClassLibrary.MaterialType">
            <summary>
            Esta clase representa los tipos de materiales
            </summary>
        </member>
        <member name="P:ClassLibrary.MaterialType.Name">
            <summary>
            String del nombre del tipo de material
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.MaterialType.Description">
            <summary>
            String de la descripcion sobre el tipo de material
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.MaterialType.#ctor(System.String,System.String)">
            <summary>
            Constructor de la clase MaterialType
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="T:ClassLibrary.Offer">
            <summary>
            Esta clase esteblece los parametros necesarios para la creacion de la oferta/.
            Implementa el patron SRP ya que tiene una unica razon de cambio
            </summary>
        </member>
        <member name="P:ClassLibrary.Offer.Name">
            <summary>
            Nombre de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Cost">
            <summary>
            Costo en caso de que tenga
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Location">
            <summary>
            Ubicacion donde la company tiene el material de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Availability">
            <summary>
            Establece si la oferta esta disponible para algun emprendedor o simplemente esta creada pero no disponible
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.RegularOffers">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Tags">
            <summary>
            Palabras claves para darle la facilidad al emprendedor de encontrar la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.DeliveryDate">
            <summary>
            Fecha de compra de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.PublicationDate">
            <summary>
            Fecha de la publicacion de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Company">
            <summary>
            Company que creo la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Entrepreneur">
            <summary>
            Este parametro esta vacio hasta un emprendedor adquiere la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Material">
            <summary>
            Establece el material de la oferta
            </summary>
            <value></value>
        </member>
        <member name="F:ClassLibrary.Offer.offerpermissions">
            <summary>
            La lista de permisos que tiene que tener el emprendedor para adquirir la la oferta
            </summary>
            <typeparam List="Permission"></typeparam>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.Offer.id">
            <summary>
            El id lo utilizamos para identificar cada oferta en el catalogo
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Offer.#ctor(System.String,ClassLibrary.Material,ClassLibrary.Location,System.Double,System.Boolean,System.Collections.ArrayList,System.DateTime,System.DateTime,ClassLibrary.Company)">
            <summary>
            Este es el constructor de la oferta que recibe los parametros para crear la misma
            </summary>
            <param name="name"></param>
            <param name="material"></param>
            <param name="location"></param>
            <param name="cost"></param>
            <param name="regularoffers"></param>
            <param name="tags"></param>
            <param name="deliverydate"></param>
            <param name="publicationdate"></param>
            <param name="offer"></param>
        </member>
        <member name="M:ClassLibrary.Offer.AddPermission(System.String)">
            <summary>
            Permite agregar permisos a la oferta
            </summary>
            <param name="permission"></param>
        </member>
        <member name="M:ClassLibrary.Offer.getOffer(ClassLibrary.Entrepreneur)">
            <summary>
            Metodo que retorna los datos de la empresa para ser enviados al emprendedor que compro la oferta
            A su vez deja como no disponible la oferta en el catalogo
            y coloca el nombre del emprendedor a la oferta
            </summary>
            <param name="entrepreneur"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.OfferManager">
            <summary>
            En esta clase se puede ver el uso del patron Expert, y aque es experto en el manejo
            de las ofertas de la aplicacion, incluso cuando se instancia esta clase la instanciamos
            a traves de singleton de modo de manejar una unica instancia.
            </summary>
        </member>
        <member name="F:ClassLibrary.OfferManager.catalog">
            <summary>
            Catalogo de ofertas de nuestra aplicacion
            </summary>
            <typeparam List="Offer"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.OfferManager.#ctor">
            <summary>
            Este es el constructor de la clase
            </summary>
        </member>
        <member name="M:ClassLibrary.OfferManager.SaveOffer(ClassLibrary.Offer)">
            <summary>
            Este metodo lo que hace es, una vez creada la oferta se guarda en el catalogo de la aplicacion
            </summary>
            <param name="offer"></param>
        </member>
        <member name="M:ClassLibrary.OfferManager.PublishOffer(System.Int32)">
            <summary>
            Este metodo se utiliza para re publicar ofertas que son priodicas 
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.OfferManager.DiseableOffer(System.Int32)">
            <summary>
            Este metodo desabilita una oferta del catalogo
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.OfferManager.GetOffersAvailability">
            <summary>
            Este metodo retorna las ofertas del catalogo que estan habilitadas
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.OfferManager.BuyOffer(ClassLibrary.Entrepreneur,System.Int32)">
            <summary>
            El metodo siguiente permite comprar la oferta al emprendedor
            </summary>
            <param name="buyer"></param>
            <param name="index"></param>
        </member>
        <member name="T:ClassLibrary.Permission">
            <summary>
            Esta clase representa los permisos de las empresas, ofertas y emprendedores
            </summary>
        </member>
        <member name="M:ClassLibrary.Permission.#ctor(System.String)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ClassLibrary.Permission.Name">
            <summary>
            String con el nombre del permiso
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.Search">
            <summary>
            Esta clase es la responsable en las busquedas dentro del catalogo de ofertas de la aplicacion
            </summary>
        </member>
        <member name="F:ClassLibrary.Search.catalog">
            <summary>
            Crea una lista de ofertas vacía
            </summary>
        </member>
        <member name="M:ClassLibrary.Search.#ctor">
            <summary>
            Carga una copia del catalogo de ofertas a la lista
            </summary>
        </member>
        <member name="M:ClassLibrary.Search.GetOfferByDepartment(System.String)">
            <summary>
            Filtra el catálogo de búsquedas según su ubicación
            </summary>
            <param name="department"></param>
            <returns>Retorna un string con una lista de ofertas</returns>
        </member>
        <member name="M:ClassLibrary.Search.GetOfferByWord(System.String)">
            <summary>
            Filtra el catálogo de búsquedas según palabras clave
            </summary>
            <param name="word"></param>
            <returns>Retorna un string con una lista de ofertas</returns>
        </member>
        <member name="M:ClassLibrary.Search.GetOfferByCategory(System.String)">
            <summary>
            Filtra el catálogo de ofertas según su categoria (tipo de material)
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Search.GetOfferByEntrepreneur(ClassLibrary.Entrepreneur)">
            <summary>
            Filtra el catálogo de búsquedas que compró un emprendedor
            </summary>
            <param name="entrepreneur"></param>
            <returns>Retorna un string con una lista de ofertas</returns>
        </member>
        <member name="M:ClassLibrary.Search.GetOfferByCompany(ClassLibrary.Company)">
            <summary>
            Filtra el catálogo de búsquedas que publicó una empresa
            </summary>
            <param name="company"></param>
            <returns>Retorna un string con una lista de ofertas</returns>
        </member>
        <member name="M:ClassLibrary.Search.GetAvailableOffersByCompany(ClassLibrary.Company)">
            <summary>
            Filtra el catálogo de ofertas y agrupa las que están disponibles 
            y fueron publicadas por determinada compañia
            </summary>
            <param name="company"></param>
            <returns>Retorna un string con una lista de ofertas</returns>
        </member>
        <member name="T:ClassLibrary.Singleton`1">
            <summary>
            Esta clase tiene como responsabilidad crear una sola instancia de las clases que la implementan (Datamanager y OfferManager) 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ClassLibrary.Singleton`1.Instance">
            <summary>
            Crea una instancia Singleton en caso de que no exista, en caso de que exista devuelve la clase existente.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.TelegramBot">
            <summary>
            Una clase que implementa un bot de Telegram.
            </summary>
        </member>
        <member name="M:ClassLibrary.TelegramBot.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.TelegramBot.HandleUpdateAsync(Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <summary>
            Maneja las actualizaciones del bot (todo lo que llega), incluyendo mensajes, ediciones de mensajes,
            respuestas a botones, etc. En este ejemplo sólo manejamos mensajes de texto.
            </summary>
        </member>
        <member name="M:ClassLibrary.TelegramBot.HandleMessageReceived(Telegram.Bot.Types.Message)">
            <summary>
            Maneja los mensajes que se envían al bot.
            Lo único que hacemos por ahora es escuchar 3 tipos de mensajes:
            - "hola": responde con texto
            - "chau": responde con texto
            - "foto": responde con una foto
            </summary>
            <param name="message">El mensaje recibido</param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TelegramBot.HandleErrorAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Manejo de excepciones. Por ahora simplemente la imprimimos en la consola.
            </summary>
        </member>
        <member name="T:ClassLibrary.UserBase">
            <summary>
            Esta clase define las propiedas y comportamiento que comparten los diferentes usuarios de la empresa
            </summary>
        </member>
        <member name="P:ClassLibrary.UserBase.Name">
            <summary>
            Propiedad Nombre del usuario
            </summary>
        </member>
        <member name="P:ClassLibrary.UserBase.Location">
            <summary>
            Propiedad ubicación de la empresa
            </summary>
        </member>
        <member name="P:ClassLibrary.UserBase.Phone">
            <summary>
            Propiedad telefono del usuario
            </summary>
        </member>
        <member name="P:ClassLibrary.UserBase.AreaOfWork">
            <summary>
            Instancia de clase AreaOfWork que representa una categoria de la empresa
            </summary>
        </member>
        <member name="F:ClassLibrary.UserBase.permissions">
            <summary>
            Lista de habilitaciones que posee un usario
            </summary>
            <typeparam list="Permission"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.UserBase.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Permite crear instancias de los usuarios del programa
            </summary>
            <param name="name"></param>
            <param name="phone"></param>
            <param name="location"></param>
            <param name="area"></param>
        </member>
        <member name="M:ClassLibrary.UserBase.AddPermission(ClassLibrary.Permission)">
             <summary>
            Permite agregar permisios a un usuario
             </summary>
        </member>
        <member name="M:ClassLibrary.UserBase.RemovePermission(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <summary>
            Permite eliminar un permiso de un usuario
            </summary>
        </member>
        <member name="M:ClassLibrary.UserBase.GetPermissions">
            <summary>
            permite obtener la lista de permisos de un usuario
            </summary>
        </member>
    </members>
</doc>
